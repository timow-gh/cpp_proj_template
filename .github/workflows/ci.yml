# See https://github.com/cpp-best-practices/gui_starter_template/blob/main/.github/workflows/ci.yml
name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "13.0.0"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        os:
          - ubuntu-20.04
#          - windows-2022
#          - macos-11
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm-13.0.0
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        developer_mode:
          - ON
          - OFF
        cxx_standard:
          - 17

        exclude:
          # mingw is determined by this author to be too bugy to support
          - os: macos-11
            compiler: gcc-11

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11
            gcov_executable: gcov
          - compiler: llvm-13.0.0
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            developer_mode: OFF
            package_generator: TBZ2

#          - os: windows-2022
#            compiler: msvc
#            generator: "Visual Studio 17 2022"
#            build_type: Debug
#            developer_mode: On
#
#          - os: windows-2022
#            compiler: msvc
#            generator: "Visual Studio 17 2022"
#            build_type: Release
#            developer_mode: On
#
#          - os: windows-2022
#            compiler: msvc
#            generator: "Visual Studio 17 2022"
#            build_type: Debug
#            developer_mode: OFF
#
#          - os: windows-2022
#            compiler: msvc
#            generator: "Visual Studio 17 2022"
#            build_type: Release
#            developer_mode: OFF
#            package_generator: ZIP


    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - uses: actions/checkout@v2

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          developer_mode: ${{ matrix.developer_mode }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          conan: false
          vcpkg: false
          ccache: false
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}

          cppcheck: false

          gcovr: true
          opencppcoverage: true

      - name: Compiler Info
        run: |
          ${{ matrix.compiler }} --version
          cmake --version
          ninja --version
          clang-tidy --version
          gcovr --version
          opencppcoverage --version

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: Configure CMake
        run: |
          cmake -S . -B ./build -G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DENABLE_DEVELOPER_MODE:BOOL=${{matrix.developer_mode}} -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' && matrix.developer_mode == 'OFF' }} -DGIT_SHA:STRING=${{ github.sha }} -DCMAKE_CXX_STANDARD:STRING=${{matrix.cxx_standard}} --debug-output

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*


      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml