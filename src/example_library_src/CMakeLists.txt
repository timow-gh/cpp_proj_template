set(HEADER_FILES
        ${CMAKE_CURRENT_LIST_DIR}/include/example_library/library.hpp
        )

set(SOURCE_FILES
        ${CMAKE_CURRENT_LIST_DIR}/source/library.cpp
        )

set(TARGET_NAME example_library)
# Don't use STATIC ore SHARED for the library, the user should decide by setting the BUILD_SHARED_LIBS
# variable when building this library
add_library(${TARGET_NAME} ${SOURCE_FILES} ${HEADER_FILES})

# Generate the export header for the library. All Symbols that are marked as "exported" in the header files
# will be exported. The export header is generated in the build directory and will be installed with the library.
include(GenerateExportHeader)
generate_export_header(${TARGET_NAME})
string(TOLOWER "${TARGET_NAME}_export.h" GENERATED_TARGET_EXPORTS_FILE_NAME)
file(COPY
        ${CMAKE_CURRENT_BINARY_DIR}/${GENERATED_TARGET_EXPORTS_FILE_NAME}
        DESTINATION
        ${CMAKE_CURRENT_BINARY_DIR}/export_header_includes/example_library)

target_include_directories(${TARGET_NAME}
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/export_header_includes/>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
        )

# Add an alias so that library can be used inside the build tree the same way it is consumed after installation
# All libraries get an alias of the form <PROJECT_NAME>::<TARGET_NAME>
add_library(${TARGET_NAME}::${TARGET_NAME} ALIAS ${TARGET_NAME})

# "EXPORT_NAME: Exported name for target files.
# This sets the name for the IMPORTED target generated by the install(EXPORT) and export() commands. If not set, the
# logical target name is used by default.", CMake docs
set(TARGET_EXPORT_NAME ${TARGET_NAME})
set(${TARGET_NAME}_MAJOR 0)
set(${TARGET_NAME}_MINOR 1)
set(${TARGET_NAME}_PATCH 0)
message(STATUS "Configuring ${TARGET_NAME} ${${TARGET_NAME}_MAJOR}.${${TARGET_NAME}_MINOR}.${${TARGET_NAME}_PATCH}")

set_target_properties(${TARGET_NAME}
        PROPERTIES
        LANGUAGE CXX
        LINKER_LANGUAGE CXX
        DEBUG_POSTFIX d
        VERSION ${${TARGET_NAME}_MAJOR}.${${TARGET_NAME}_MINOR}.${${TARGET_NAME}_PATCH}
        SOVERSION ${PROJECT_VERSION_MAJOR}
        EXPORT_NAME ${TARGET_EXPORT_NAME})

include(Warnings)
add_warnings_and_compile_options(${TARGET_NAME} cpp_proj_template_WARNINGS_AS_ERRORS)

# Link to all targets that are required to build this library. Use the target alias to link to the target,
# otherwise no error message will be shown if the target is not found.
# The library fmt::fmt is linked private, since the library is not exposed to the user of this library.
target_link_libraries(${TARGET_NAME}
        PUBLIC $<$<BOOL:${BUILD_SHARED_LIBS}>:headeronly_supporting_lib::headeronly_supporting_lib>
        PRIVATE $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:headeronly_supporting_lib::headeronly_supporting_lib>
        )

# Install (i.e. copy) the library headers
install(DIRECTORY "include/${TARGET_NAME}" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${GENERATED_TARGET_EXPORTS_FILE_NAME}"
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${TARGET_NAME}")

# Install the library target
# ${TARGET_NAME}TargetsExportSet is the name of the export set that is created by the call to install(EXPORT)
install(TARGETS
        ${TARGET_NAME}
        EXPORT ${TARGET_NAME}TargetsExportSet
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Install the export set, using the helper function from cmake/setupExportSetInstall.cmake and the file Config.cmake.in
# In the Config.cmake.in all dependencies of the library must be listed.
setupExportSetInstall("${TARGET_NAME}" "${TARGET_NAME}TargetsExportSet" "example_libraryConfig.cmake.in" ${${TARGET_NAME}_MAJOR} ${${TARGET_NAME}_MINOR} ${${TARGET_NAME}_PATCH})